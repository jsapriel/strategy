var test = require('tape');
var threshold = require('./');
var ripple = require('ripple-lib');
var Remote = ripple.Remote;
var Amount = ripple.Amount;
var Seed = ripple.Seed;
var KeyPair = ripple.KeyPair;
var sjcl = ripple.sjcl;
var wallet = require('ripple-wallet-generator')({ sjcl: ripple.sjcl });

// want to show: sec.sign() == sec1.sign(sec2.sign()) == sec1.mul(sec2).sign()

var options = {
  trace :         false,
  trusted:        true,
  local_signing:  true,
  servers: [
    { host: 's-west.ripple.com', port: 443, secure: true }
  ]
};

var wallet1 = wallet.generate();
var wallet2 = wallet.generate();
var wallet = threshold(wallet1, wallet2);

// sign
var seed1 = Seed.from_json(wallet1.secret);
var keypair1 = seed1.get_key(wallet1.address);
var seed2 = Seed.from_json(wallet2.secret)
var keypair2 = seed2.get_key(wallet2.address);
var seed = Seed.from_json(wallet.secret);
var keypair = seed.get_key(wallet.address);

console.log(keypair._secret._exponent)

// signing

  var hash = sjcl.hash.sha256.hash("Hello World!")

  // var sig = keypair._secret.sign(hash);

  // var sec = keypair._secret._exponent;
  var sec1 = keypair1._secret._exponent;
  var sec2 = keypair2._secret._exponent;
  var sec = keypair._secret._exponent;

  var R  = keypair._secret._curve.r,
      l  = R.bitLength(),
      k  = sjcl.bn.random(R.sub(1)).add(1),
      r  = keypair._secret._curve.G.mult(k).x.mod(R),
      ss = sjcl.bn.fromBits(hash).add(r.mul(sec)),
      s  = ss.mul(k.inverseMod(R)).mod(R);

  var signature = sjcl.bitArray.concat(r.toBits(l), s.toBits(l));

  console.log(keypair._pubkey.verify(hash, signature))
